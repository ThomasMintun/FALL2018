
Tom Grossman
CS4760 - Operating Systems
Project 4 - Process Scheduling
04/23/17


Usage Commands:
	Compile:
		To compile: make
		To remove: make clean
	Execution:
		./oss 
	Log Files:
		logOSS.out <- contains all printouts from OSS
		logUSER.out <- contains all printouts from each USER process (extra log)
	
Defined Variables: (MACROS)
	CHANCE_HIGH_PRIORITY 10 // Raising this number increases the chance of a process being created and inserted into queue 1 regardless of quantum. Percent chance -- 10 = 10% chance
	IO_INTERRUPT_CHANCE 5 // This number is multipled by 1000000000 to give a time in nanoseconds -- Lower number = more frequent interupts -- Higher number reduces frequency, but does not eliminate them
	MASTER_OVERHEAD_TIME 5 // This number is multiplied by 10,000 to give OSS sleep time in microseconds. DEFAULT: 5 = .05 second sleep per cycle (spread out over cycle)
	MAX_QUANTUM_LENGTH 5 // Quantum length is chosen at random, but this number is the maximum value allowed (in seconds)
	MAX_USER_PROCESSES 18 // Changes max number of children process spawns
	PROCESS_SPAWN_RATE 3 // How frequent processes spawn -- calculated by rand() % PROCESS_SPAWN_RATE and then sleeping for the result in seconds
	
Description:
	Implemented a Multi-Level Feedback Scheduling system. Processes are spawned and assigned a quantum. Depending on the quantum, the process is placed into a specific queue. 
	If queue one has a process in it, it is scheduled. However, if queue one is empty, the top process in queue two is moved to queue one. If queue two is empty, the top process from queue three is moved into queue two.
	In the event of a process getting stuck in a lower priority queue, the scheduler checks the queues for processes that have been there for too long and moves them to the next priority queue.
	Once a process is scheduled, it requests that OSS stop and let it have "control" of the CPU. If the process cannot be completed within the alloted time, it is "interrupted" and sent back into the queues.
	If a process completes within the allotted time, it exits and OSS cleans the PCB block that was assigned to make way for a new process.
	

